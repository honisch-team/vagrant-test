############################################################
# Reusable workflow for building and testing using given virtualization provider
############################################################
name: Sub-Workflow Build and Test

on:
  workflow_call:
    inputs:
      # Virtualization provider id: vmw or vbx
      virt-provider-id:
        required: true
        type: string
      # Runner name
      runner-name:
        required: true
        type: string

jobs:
  # Build Vagrant box
  build:
    runs-on: ${{inputs.runner-name}}
    name: build_${{inputs.virt-provider-id}}_${{inputs.runner-name}}
    steps:
      # Free Ubuntu disk space
      - name: Free Ubuntu Disk Space
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main

      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # Upgrade Mac OS tools
      - name: Upgrade Mac OS tools
        if: runner.os == 'macOS'
        run: |
          brew install bash
          brew install gnu-sed
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
          brew install gnu-getopt
          echo "/usr/local/opt/gnu-getopt/bin" >> $GITHUB_PATH

      # Setup build environment
      - name: Setup build environment
        env:
          VMWARE_WORKSTATION_VERSION: ${{vars.VMWARE_WORKSTATION_VERSION}}
        run: |
          echo "VMware Workstation $VMWARE_WORKSTATION_VERSION"
          bash ./build/github_build_helper.sh install-build-tools ${{inputs.virt-provider-id}} ${{runner.os}} build

      # Get install image
      - name: Get install image
        uses: actions/download-artifact@v4
        with:
          name: install-media
          path: ./install-media/

      # # Check install image
      # - name: Check install image
      #   run: |
      #     ls -l ./install-media/install.iso
      #     shasum -a 1 ./install-media/install.iso

      # Get update files
      - name: Get update files
        uses: actions/download-artifact@v4
        with:
          name: update-files
          path: ./install-media/update-files

      # Create VM and install OS
      - name: Create VM and install OS
        id: install-os
        timeout-minutes: 60
        #continue-on-error: true
        run: make -f ./box/Makefile install_os_vm.${{inputs.virt-provider-id}}

      # Handle error
      #- name: "Retry: Create VM and install OS"
      #  if: (inputs.virt-provider-id == 'vmw') && (steps.install-os.outcome != 'success')
      #  run: |
      #    brew uninstall vmware-fusion
      #    brew install --cask vmware-fusion
      #    bash ./build/github_build_helper.sh configure-vmware-fusion
      #    make -f ./box/Makefile clean install_os_vm.${{inputs.virt-provider-id}}
      # Get logs
      #- name: Get VM logs
      #  if: steps.install-os.outcome != 'success'
      #  run: |
      #    echo "Outcome of previous step: ${{steps.install-os.outcome}}"
      #    exit 1
      # Update VM
      - name: Update VM
        timeout-minutes: 300
        run: make -f ./box/Makefile update_vm_nodeps.${{inputs.virt-provider-id}}
        #run: make -f ./box/Makefile update_vm_nodeps.${{inputs.virt-provider-id}} UPDATE_VM_OPTS="--no-install-wu --no-cleanup-dism --no-zerodisk"

      # Package box
      - name: Build Vagrant box
        run: make -f ./box/Makefile package_nodeps.${{inputs.virt-provider-id}}

      # Upload Dist artifact
      - name: Upload Dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: Dist_${{inputs.virt-provider-id}}_${{inputs.runner-name}}
          path: ./dist/${{inputs.virt-provider-id}}
          retention-days: 5

      # Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Logs_Build_${{inputs.virt-provider-id}}_${{inputs.runner-name}}
          path: |
            ./vm-base/**/*.log
            /var/log/vmware*.log

  # Test Vagrant box
  test:
    # Run after build
    needs: build
    strategy:
      fail-fast: false
      matrix:
        test-run-id: [default, clockoffset]

    # Reference reusable workflow to do the actual building and testing
    uses: ./.github/workflows/sub-test.yml

    # Pass parameters to the sub-workflow
    with:
      # Test run
      test-run-id: ${{matrix.test-run-id}}
      # Virtualization provider ID
      virt-provider-id: ${{inputs.virt-provider-id}}
      # Runner name
      runner-name: ${{inputs.runner-name}}
