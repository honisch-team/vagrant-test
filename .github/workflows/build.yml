############################################################
# Root workflow for building
############################################################
name: Build

run-name: Build ${{github.run_id}}

on: [push, workflow_dispatch]

jobs:
  # Provide install files
  provide-install-files:
    runs-on: windows-2022
    timeout-minutes: 60
    steps:
      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # Determine cache keys
      - name: Get cache keys
        id: get-cache-keys
        shell: pwsh
        run: |
          ## Get cache keys for downloads cache
          $cacheKeys = ./build/github_build_helper.ps1 -GetInstallFilesCacheKeys -DownloadsInstallImage ./install-media/downloads_install_image.csv `
            -DownloadsUpdate ./install-media/downloads_update.csv -BuildInstallImage ./install-media/create_install_image.ps1
          echo $cacheKeys
          echo "install-image-files-cache-key=$($cacheKeys.installImageFilesKey)" >> $env:GITHUB_OUTPUT
          echo "custom-install-image-cache-key=$($cacheKeys.custominstallImageKey)" >> $env:GITHUB_OUTPUT
          echo "update-files-cache-key=$($cacheKeys.updateFilesKey)" >> $env:GITHUB_OUTPUT

      # Get cached custom install image
      - name: Get cached custom install image
        id: get-cached-custom-install-image
        uses: actions/cache@v4
        with:
          key: custom-install-image-${{steps.get-cache-keys.outputs.custom-install-image-cache-key}}
          path: ./install-media/install.iso

      # Get cached install image files
      - name: Get cached install image files
        id: get-cached-install-image-files
        if: steps.get-cached-custom-install-image.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          key: install-image-files-${{steps.get-cache-keys.outputs.install-image-files-cache-key}}
          restore-keys: install-image-files-
          path: ./install-media/install-image-files

      # Download install image files
      - name: Download install image files
        id: download-install-image-files
        if: (steps.get-cached-custom-install-image.outputs.cache-hit != 'true') && (steps.get-cached-install-image-files.outputs.cache-hit != 'true')
        shell: pwsh
        run: ./install-media/download_files.ps1 -Downloads ./install-media/downloads_install_image.csv -OutputDir ./install-media/install-image-files -Cleanup

      # Verify install image files
      - name: Verify install image files
        id: verify-install-image-files
        if: (steps.get-cached-custom-install-image.outputs.cache-hit != 'true') && (steps.get-cached-install-image-files.outputs.cache-hit == 'true')
        shell: pwsh
        run: ./install-media/download_files.ps1 -DownloadsCsvFile ./install-media/downloads_install_image.csv -OutputDir ./install-media/install-image-files -VerifyOnly

      # Get cached update files
      - name: Get cached update files
        id: get-cached-update-files
        uses: actions/cache@v4
        with:
          key: update-files-${{steps.get-cache-keys.outputs.update-files-cache-key}}
          restore-keys: update-files-
          path: ./install-media/update-files

      # Download update files
      - name: Download update files
        id: download-update-files
        if: steps.get-cached-update-files.outputs.cache-hit != 'true'
        shell: pwsh
        run: ./install-media/download_files.ps1 -Downloads ./install-media/downloads_update.csv -OutputDir ./install-media/update-files -Cleanup

      # Verify update files
      - name: Verify update files
        id: verify-update-files
        if: steps.get-cached-update-files.outputs.cache-hit != 'true'
        shell: pwsh
        run: ./install-media/download_files.ps1 -Downloads ./install-media/downloads_update.csv -OutputDir ./install-media/update-files -VerifyOnly

      # Upload update files
      - name: Upload update files
        uses: actions/upload-artifact@v4
        with:
          name: update-files
          path: ./install-media/update-files
          retention-days: 5

      # Install Windows ADK deployment tools
      - name: Install Windows ADK deployment tools
        if: steps.get-cached-custom-install-image.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          ./build/github_build_helper.ps1 -InstallAdkDeploymentTools || throw "Error installing ADK deployment tools"
          echo "Adding Oscdimg dir to PATH"
          echo "${env:ProgramFiles(x86)}\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\amd64\Oscdimg" >> $env:GITHUB_PATH

      # Create custom install image
      - name: Create custom install image
        if: steps.get-cached-custom-install-image.outputs.cache-hit != 'true'
        shell: pwsh
        run: ./install-media/create_install_image.ps1 -InstallFilesDir ./install-media/install-image-files -WorkDir ./install-media/work -Output ./install-media/install.iso

      # Upload custom install image artifact
      - name: Upload install image
        uses: actions/upload-artifact@v4
        with:
          name: install-media
          path: ./install-media/install.iso
          retention-days: 5

      # Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Logs_CreateInstallMedia
          path: |
            C:\Windows\Logs\DISM\dism.log

  # Build and test Vagrant box
  build-and-test:
    # Run after provide-install-files
    needs: provide-install-files

    # Build using different virtualization providers
    strategy:
      fail-fast: false
      matrix:
        include:
          # - virt-provider-id: vbx
          #   runner-name: macos-14
          # - virt-provider-id: vmw
          #   runner-name: macos-14
          - virt-provider-id: vbx
            runner-name: ubuntu-22.04
          # - virt-provider-id: vmw
          #   runner-name: ubuntu-22.04

    # Reference reusable workflow to do the actual building and testing
    uses: ./.github/workflows/sub-build-and-test.yml

    # Inherit secrets
    secrets: inherit

    # Pass parameters to the sub-workflow
    with:
      # Virtualization provider ID
      virt-provider-id: ${{matrix.virt-provider-id}}
      # Runner name
      runner-name: ${{matrix.runner-name}}
