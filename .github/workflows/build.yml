############################################################
# Root workflow for building
############################################################
name: Build

run-name: Build ${{github.run_id}}

on: [push, workflow_dispatch]

jobs:
  # Create install media
  create-install-media:
    runs-on: windows-2022
    timeout-minutes: 60
    steps:
      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # Determine cache keys
      - name: Get cache keys
        id: get-cache-keys
        shell: pwsh
        run: |
          ## Get cache key for downloads cache
          $cacheKeys = ./build/github_build_helper.ps1 -GetInstallMediaCacheKeys -DownloadsCsvFile ./install-media/downloads.csv -ScriptFile ./install-media/create_install_image.ps1
          echo $cacheKeys
          echo "install-files-cache-key=$($cacheKeys.installFilesKey)" >> $env:GITHUB_OUTPUT
          echo "install-image-cache-key=$($cacheKeys.installImageKey)" >> $env:GITHUB_OUTPUT

      # Get cached install image
      - name: Get cached install image
        id: get-cached-install-image
        uses: actions/cache@v3
        with:
          key: install-image-${{steps.get-cache-keys.outputs.install-image-cache-key}}
          path: ./install-media/install.iso

      # Get cached install files
      - name: Get cached install files
        id: get-cached-install-files
        if: steps.get-cached-install-image.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          key: install-files-${{steps.get-cache-keys.outputs.install-files-cache-key}}
          restore-keys: install-files-
          path: ./install-media/downloads

      # Download install files
      - name: Download install files
        id: download-install-files
        if: (steps.get-cached-install-image.outputs.cache-hit != 'true') && (steps.get-cached-install-files.outputs.cache-hit != 'true')
        shell: pwsh
        run: ./install-media/download_install_files.ps1 -DownloadsCsvFile ./install-media/downloads.csv -OutputDir ./install-media/downloads -CleanupDownloads

      # Verify install files
      - name: Verify install files
        id: verify-install-files
        if: (steps.get-cached-install-image.outputs.cache-hit != 'true') && (steps.get-cached-install-files.outputs.cache-hit == 'true')
        shell: pwsh
        run: ./install-media/download_install_files.ps1 -DownloadsCsvFile ./install-media/downloads.csv -OutputDir ./install-media/downloads -VerifyOnly

      # Install Windows ADK deployment tools
      - name: Install Windows ADK deployment tools
        if: steps.get-cached-install-image.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          ./build/github_build_helper.ps1 -InstallAdkDeploymentTools || throw "Error installing ADK deployment tools"
          echo "Adding Oscdimg dir to PATH"
          echo "${env:ProgramFiles(x86)}\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\amd64\Oscdimg" >> $env:GITHUB_PATH

      # Create install image
      - name: Create install image
        if: steps.get-cached-install-image.outputs.cache-hit != 'true'
        shell: pwsh
        run: ./install-media/create_install_image.ps1 -DownloadsCsvFile ./install-media/downloads.csv -InstallFilesDir ./install-media/downloads -WorkDir ./install-media/work -Output ./install-media/install.iso

      # Upload custom install image artifact
      - name: Upload install image
        uses: actions/upload-artifact@v4
        with:
          name: install-media
          path: ./install-media/install.iso
          retention-days: 5

      # Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Logs_CreateInstallMedia
          path: |
            C:\Windows\Logs\DISM\dism.log

  # Build and test Vagrant box
  build-and-test:
    # Run after cache-install-media
    needs: create-install-media

    # Build using different virtualization providers
    strategy:
      fail-fast: false
      matrix:
        include:
          # - virt-provider-id: vbx
          #   runner-name: macos-14
          # - virt-provider-id: vmw
          #   runner-name: macos-14
          - virt-provider-id: vbx
            runner-name: ubuntu-latest
          # - virt-provider-id: vmw
          #   runner-name: ubuntu-latest

    # Reference reusable workflow to do the actual building and testing
    uses: ./.github/workflows/sub-build-and-test.yml

    # Inherit secrets
    secrets: inherit

    # Pass parameters to the sub-workflow
    with:
      # Virtualization provider ID
      virt-provider-id: ${{matrix.virt-provider-id}}
      # Runner name
      runner-name: ${{matrix.runner-name}}
